    async def {{displayMethodName (snakeCase operation.operationId)}}(
            {{{operationArgumentBuilder operation}}}
    ):
        """
{{{pyDocstringBuilder operation}}}
        """
        http_method = "{{operation.method}}".upper()
        api_url = format_url(f"""
            {self._base_url}
            {{{updatePath operation}}}
            """)
        {{#if operation.queryParams.length}}
        if query_params:
            encoded_query_params = urlencode(query_params)
            api_url += f"/?{encoded_query_params}"
        {{/if}}

        {{#if operation.bodyModel}}
        {{#if (eq operation.bodyFormat "binary")}}
        body = HTTPClient.format_binary_data(string)
        {{else}}
        body = {{snakeCase operation.bodyModel}}.as_dict()
        {{/if}}
        headers = {
            "Accept": "{{operation.produces.[0]}}",
            "Content-Type": "{{operation.consumes.[0]}}"
        }
        {{else}}
        body = {}
        headers = {}
        {{/if}}

        request, error = await self._request_executor.create_request(
            http_method, api_url, body, headers
        )

        if error:
        {{#if operation.responseModel}}
            return (None, None, error)
        {{else}}
            return (None, error)
        {{/if}}

        {{#if operation.responseModel}}
        response, error = await self._request_executor\
            .execute(request, {{pascalCase operation.responseModel}})
        {{else}}
        response, error = await self._request_executor\
            .execute(request)
        {{/if}}

        if error:
        {{#if operation.responseModel}}
            return (None, response, error)
        {{else}}
            return (response, error)
        {{/if}}

        {{#if operation.responseModel}}
        try:
        {{#if operation.isArray}}
            result = []
            for item in camel_case(response.get_body()):
                {{#if (eq (pascalCase operation.responseModel) "Application")}}
                result.append(find_app_model(item["signOnMode"])(item))
                {{else}}
                result.append({{pascalCase operation.responseModel}}(item))
        {{else}}
            {{#if (eq (pascalCase operation.responseModel) "Application")}}
            body = camel_case(response.get_body())
            result = find_app_model(body["signOnMode"])(body)
            {{else}}
            result = {{pascalCase operation.responseModel}}(
                camel_case(response.get_body())
            )
        {{/if}}
        except Exception as error:
            {{#if operation.responseModel}}
            return (None, response, error)
            {{else}}
            return (response, error)
            {{/if}}
        return (result, response, None)
        {{else}}
        return (response, None)
        {{/if}}