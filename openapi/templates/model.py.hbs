# flake8: noqa
{{> partials.copyrightHeader }}
{{#if (ne model.enum undefined)}}

from aenum import MultiValueEnum


class {{pascalCase model.modelName}}(
    {{model.type}},
    MultiValueEnum
):
    """
    An enumeration class for {{pascalCase model.modelName}}.
    """

    {{#each model.enum as |enum|}}
    {{{replaceColons (upperCase (snakeCase enum))}}} = "{{upperCase enum}}", "{{lowerCase enum}}"
    {{/each}}
{{else}}

{{#if (ne model.extends undefined)}}
from okta.models.{{snakeCase model.extends}}\
    import {{model.extends}}
{{else}}
from okta.okta_object import OktaObject
{{/if}}
{{#each subTypes as |type|}}
from okta.models.{{snakeCase type}}\
    import {{pascalCase type}}
{{/each}}


class {{pascalCase model.modelName}}(
    {{#if (ne model.extends undefined)}}
    {{model.extends}}
    {{else}}
    OktaObject
    {{/if}}
):
    """
    A class for {{pascalCase model.modelName}} objects.
    """

    def __init__(self, config=None):
        super().__init__(config)
        {{#if (gt model.properties.length 0)}}
        if config:
            {{#if (ne model.signOnMode undefined)}}
            self.sign_on_mode = "{{model.signOnMode}}"
            {{/if}}
            {{#each model.properties as |prop|}}
            {{#if (exists prop "$ref")}}
            if "{{camelCase prop.propertyName}}" in config:
                if isinstance(config["{{camelCase prop.propertyName}}"],
                              {{pascalCase prop.model}}):
                    self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]
                else:
                    self.{{snakeCase prop.propertyName}} = {{pascalCase prop.model}}(
                        config["{{camelCase prop.propertyName}}"]
                    )
            else:
                self.{{snakeCase prop.propertyName}} = None
            {{else}}
            {{#if (ne prop.default undefined) }}
            self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]\
                if "{{camelCase prop.propertyName}}" in config else "{{prop.default}}"
            {{else}}
            self.{{snakeCase prop.propertyName}} = config["{{camelCase prop.propertyName}}"]\
                if "{{camelCase prop.propertyName}}" in config else None
            {{/if}}
            {{/if}}
            {{/each}}
        else:
            {{#each model.properties as |prop|}}
            {{#if (ne prop.default undefined) }}
            self.{{snakeCase prop.propertyName}} = "{{prop.default}}"
            {{else}}
            self.{{snakeCase prop.propertyName}} = None
            {{/if}}
            {{/each}}
        {{else}}
        pass
        {{/if}}

    def request_format(self):
        parent_req_format = super().request_format()
        current_obj_format = {
            {{#each model.properties as |prop|}}
            "{{prop.propertyName}}": self.{{snakeCase prop.propertyName}}{{#unless @last}},{{/unless}}
            {{/each}}
        }
        parent_req_format.update(current_obj_format)
        return parent_req_format
{{/if}}